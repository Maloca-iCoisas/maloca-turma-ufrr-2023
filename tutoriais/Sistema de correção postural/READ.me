#  Sistema de Monitoramento de Postura com Feedback utilizando o MPU6050X' 
## Descri√ß√£o:
  - O objetivo deste projeto √© detectar a postura do usu√°rio em tempo real e alert√°-lo se ele estiver em uma postura incorreta. Para isso, o sistema ser√° capaz de medir os √¢ngulos de inclina√ß√£o do corpo e fornecer feedback atrav√©s de um LED ou buzzer caso a postura seja inadequada.
#:


## √çndice 
1-  [Introdu√ß√£o](#introdu√ß√£o)

2-  [Requisitos](#requisitos)

3- [Configura√ß√£o do ambiente](#configura√ß√£o-do-ambiente)
  - [Parte de software](#parte-de-software)
  - [Montagem do circuito](#montagem-do-circuito)

4- [Programa√ß√£o](#programa√ß√£o)

5- [Teste e Valida√ß√£o](#teste-e-valida√ß√£o)

6- [Informa√ß√µes Adicionais](#informa√ß√µes-adicionais)

7-[Expans√£o e melhorias](#Expans√£o-e-melhorias)

8-[Refer√™ncias](#Refer√™ncias)

  
 
# Introdu√ß√£o
- Manter uma boa postura √© essencial para a sa√∫de e o bem-estar geral, pois impacta diretamente a funcionalidade do corpo. Uma postura inadequada pode sobrecarregar m√∫sculos e articula√ß√µes, causando desconfortos, dores cr√¥nicas, fadiga e at√© condi√ß√µes mais graves, como escoliose, hipercifose ou h√©rnias de disco. 
Para enfrentar esses desafios, sistemas de corre√ß√£o postural, como o circuito aqui apresentado , desempenham um papel fundamental. Utilizando sensores como o MPU6050, esse dispositivo monitora a inclina√ß√£o do corpo em tempo real e emite alertas visuais e sonoros (via LED e buzzer) quando detecta desvios inadequados. Isso incentiva o usu√°rio a corrigir sua postura imediatamente, promovendo h√°bitos saud√°veis e prevenindo problemas futuros. Dessa forma, um corretor postural n√£o apenas auxilia na preven√ß√£o de complica√ß√µes musculoesquel√©ticas, mas tamb√©m contribui para a reeduca√ß√£o postural e para uma melhor qualidade de vida.


# Requisitos 
- **1x ESP32**
- **1x Sensor MPU6050**
- **1x LED**
- **1x Buzzer**
- **1x Protoboard**
- **1x Resistor de 220Œ©**
- **Fios jumper para conex√µes**



## Software
- C/C++ 
- Ardu√≠no IDE

# Configura√ß√£o-do-ambiente 

## Software
- **Linguagem de Programa√ß√£o**: C/C++
- **Ambiente de Desenvolvimento**: Arduino IDE

## Configura√ß√£o do Ambiente

### Parte de Software

### Passo 1: Fazer o Download da Arduino IDE

1. Acesse o site oficial da **[Arduino](https://www.arduino.cc/en/software)**.
2. Selecione a vers√£o do Arduino IDE para o seu sistema operacional (Windows, macOS ou Linux).
3. Fa√ßa o download e instale o **Arduino IDE** no seu computador.

### Passo 2: Instalar as Bibliotecas Necess√°rias

Ap√≥s abrir o Arduino IDE, siga os passos abaixo:

#### 1. Biblioteca **Wire.h** (Comunica√ß√£o I2C):
- A biblioteca **Wire** j√° est√° inclu√≠da no Arduino IDE, ent√£o n√£o h√° necessidade de fazer o download manual. Ela √© utilizada para a comunica√ß√£o I2C entre o **ESP32** e o **sensor MPU6050**.

#### 2. Biblioteca **MPU6050.h** (Sensor MPU6050):
- A biblioteca **MPU6050** pode ser instalada diretamente pelo Arduino IDE.
  - V√° em **Sketch** ‚Üí **Incluir Biblioteca** ‚Üí **Gerenciar Bibliotecas**.
  - Na janela de **Gerenciador de Bibliotecas**, pesquise por **MPU6050**.
  - Selecione a biblioteca **MPU6050** e clique em **Instalar**.

#### 3. Biblioteca do **ESP32**:
- Para programar o **ESP32**, voc√™ precisa instalar a placa no Arduino IDE.
  1. V√° em **Arquivo** ‚Üí **Prefer√™ncias**.
  2. Na se√ß√£o **URLs Adicionais de Gerenciadores de Placas**, adicione o seguinte link:
     ```
     https://dl.espressif.com/dl/package_esp32_index.json
     ```
  3. Em seguida, v√° em **Ferramentas** ‚Üí **Placa** ‚Üí **Gerenciador de Placas**.
  4. Pesquise por **ESP32** e instale a vers√£o mais recente da plataforma **ESP32**.

### Passo 3: Digite o C√≥digo

Agora, no Arduino IDE, digite ou cole o c√≥digo que ser√° utilizado para o **monitoramento de postura** com o sensor **MPU6050**, **LED** e **buzzer**.

### Passo 4 : Compile e Execute o C√≥digo
- Verifique o c√≥digo e fa√ßa o upload para a placa ESP-32 ap√≥s verificar se a conex√£o das portas USB e a placa escolhida est√£o corretas.
- Ap√≥s o upload, o **ESP32** ir√° iniciar a execu√ß√£o do c√≥digo.

## Montagem do circuito
### Passo 1: Componentes 
- Fa√ßa a separa√ß√£o dos componentes que ser√£o necess√°rios para a montagem desse circuito  
### Passo 2: Conectar o ESP32 √† Protoboard

- Conecte o **GND** do **ESP32** ao **GND** da **protoboard**.
- Conecte o **5V** do **ESP32** ao **polo positivo** da **protoboard**.

### Passo 3: Conectar o Sensor MPU6050 ao ESP32

Conecte os pinos do sensor **MPU6050** ao **ESP32** da seguinte forma:

- **VCC** do **MPU6050** -> **3.3V** do **ESP32**
- **GND** do **MPU6050** -> **GND** da **protoboard**
- **SCL** do **MPU6050** -> **GPIO 23** do **ESP32**
- **SDA** do **MPU6050** -> **GPIO 22** do **ESP32**

### Passo 4: Conectar o LED √† Protoboard

1. Insira o **LED** na **protoboard**.
2. Conecte o **anodo** (pino longo) do **LED** √† **porta GPIO 13** do **ESP32**.
3. Conecte o **catodo** (pino curto) do **LED** a um **resistor de 220Œ©**.
4. Conecte o outro lado do resistor ao **polo negativo da protoboard** (GND).

### Passo 5: Conectar o Buzzer √† Protoboard

1. Conecte o **pino negativo** (fio preto) do **buzzer** ao **polo negativo da protoboard** (GND).
2. Conecte o **pino positivo** do **buzzer** √† **porta GPIO 34** do **ESP32**.

### Passo 6: Iniciar o C√≥digo

Agora, com todas as conex√µes feitas, inicie o c√≥digo no ambiente de desenvolvimento (como o Arduino IDE ou o Wokwi) para testar o monitoramento da postura com feedback visual (LED) e sonoro (buzzer).
- Idealmente deve estar assim ap√≥s os passos anteriormente ditos:

![Circuito](https://github.com/ArthurRamos26/Tutorial_Maloca_2/blob/b93d4d0eb7de3551f537ff43469fd40d67a6202d/Circuito%20.png)


# Programa√ß√£o 
## O C√≥digo utilizado foi : 
```` cpp 
#include <Wire.h>
#include <MPU6050.h>

MPU6050 mpu;


const int ledPin = 13;   // Pino do LED
const int buzzerPin = 34; // Pino do Buzzer

// Definindo o limite de inclina√ß√£o (em graus)
const float angleThreshold = 10.0;

void setup() {
  Serial.begin(115200);
  
  // Inicializa a comunica√ß√£o I2C
  Wire.begin(22, 23);  // Pinos SDA e SCL definidos

  // Inicializa o sensor MPU6050
  mpu.initialize();
  
  // Configura os pinos do LED e buzzer
  pinMode(ledPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  // Testa a conex√£o do MPU6050
  if (!mpu.testConnection()) {
    Serial.println("MPU6050 n√£o est√° conectado!");
    while (1);
  }

  Serial.println("MPU6050 Conectado!");
}

void loop() {
  // Vari√°veis para armazenar os dados de acelera√ß√£o
  int16_t ax, ay, az;
  int16_t gx, gy, gz;
  
  // L√™ os dados do sensor MPU6050
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  // Calcular o √¢ngulo de inclina√ß√£o com base na acelera√ß√£o
  float angleX = atan2(ay, az) * 180.0 / PI;  // Inclina√ß√£o no eixo X
  float angleY = atan2(ax, az) * 180.0 / PI;  // Inclina√ß√£o no eixo Y

  // Exibir os valores de √¢ngulo no monitor serial
  Serial.print("Angle X: ");
  Serial.print(angleX);
  Serial.print("  Angle Y: ");
  Serial.println(angleY);

  // L√≥gica para verificar postura
  if (abs(angleX) > angleThreshold || abs(angleY) > angleThreshold) {
    // Postura incorreta
    digitalWrite(ledPin, HIGH); // Ativa o LED
    digitalWrite(buzzerPin, HIGH); // Ativa o Buzzer
    Serial.println("Postura incorreta! Corrija sua postura.");
  } else {
    // Postura correta
    digitalWrite(ledPin, LOW);  // Desativa o LED
    digitalWrite(buzzerPin, LOW);  // Desativa o Buzzer
    Serial.println("Postura correta!");
  }
  
  delay(500); // Atraso de 500ms antes da pr√≥xima leitura
}

`````


### Explica√ß√£o do c√≥digo 
-  No in√≠cio do c√≥digo, s√£o importadas as bibliotecas respons√°veis pelo funcionamento do sensor MPU-6050 e pela comunica√ß√£o I2C. Em seguida, s√£o declarados os pinos utilizados para o LED e o buzzer, al√©m da defini√ß√£o do limite m√°ximo de inclina√ß√£o permitida, considerado saud√°vel. Esse limite foi estabelecido com base em estudos que indicam que angula√ß√µes superiores a 10¬∞ podem ser um indicativo de escoliose ou aumentar a predisposi√ß√£o a danos na postura.

- Ap√≥s a declara√ß√£o dos pinos e vari√°veis, ocorre a inicializa√ß√£o do sensor MPU-6050, garantindo sua conex√£o correta com o sistema. Os pinos do LED e do buzzer s√£o configurados como sa√≠das (OUTPUT), permitindo que esses dispositivos sejam controlados pelo microcontrolador para emitir alertas visuais e sonoros quando necess√°rio.

- O c√°lculo da inclina√ß√£o √© realizado com base nos dados de acelera√ß√£o coletados pelo sensor. Utiliza-se a fun√ß√£o atan2 para calcular os √¢ngulos nos eixos X e Y. Esses valores inicialmente est√£o em radianos, e para convert√™-los em graus, multiplica-se pelo fator de convers√£o 180/ùúã. Essa convers√£o √© necess√°ria, pois os graus s√£o uma unidade mais intuitiva para interpretar a inclina√ß√£o em compara√ß√£o com radianos, facilitando a an√°lise e defini√ß√£o de limites como o √¢ngulo de 10¬∞ estabelecido no c√≥digo.   

# Teste-e-Valida√ß√£o 
## Testes
- Foi realizado o teste no simulador wokwi onde funcionou perfeitamente 
## Resultados : 
- 
###  O que foi implementado:
- Um cicuito que avisa quado h√° necessidade de corre√ß√£o postural 
### Ajudar No Tratamento:
- Esse sistema pode ajudar tanto na preven√ß√£o de les√¥es na regi√£o da coluna quanto no tratamento de doen√ßas relativas a essa regi√£o como: Escoliose, Hipercifose,Lombalgia,H√©rnia De Disco.

# Experimentos:

### Teste No Simulador :
- Segue a foto Do circuito no simulador funcionando perfeitamente

### Resultados dos Testes:


- Em caso de postura correta : 

![Correta](https://github.com/ArthurRamos26/Tutorial_Maloca_2/blob/b93d4d0eb7de3551f537ff43469fd40d67a6202d/Posturacorreta.png)
- Em caso de Postura incorreta:

![Postura Incorreta](https://github.com/ArthurRamos26/Tutorial_Maloca_2/blob/b93d4d0eb7de3551f537ff43469fd40d67a6202d/Postura%20incorreta.png)
# Expans√£o-e-melhorias
- Uma melhoria seria tentar reduzir o tamanho do circuito para tornar mais f√°cil o seu uso 

# Refer√™ncias
  O link do projeto no simulador : https://wokwi.com/projects/305569599398609473
